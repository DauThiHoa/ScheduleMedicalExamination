{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Documents\\\\GitHub\\\\ScheduleMedicalExamination\\\\src\\\\containers\\\\System\\\\ModalEditUser.js\";\nimport React, { Component } from 'react'; // import { FormattedMessage } from 'react-intl';\n\nimport { connect } from 'react-redux';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'; // import { emitter } from \"../../utils/emitter\";\n\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ModalEditUser extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => {\n      this.props.toggleFromParent();\n    };\n\n    this.handleOnChageInput = (event, id) => {\n      // good code\n      let copyState = { ...this.state\n      };\n      copyState[id] = event.target.value;\n      this.setState({ ...copyState\n      });\n    };\n\n    this.checkValidateInput = () => {\n      let isValid = true;\n      let arrInput = ['email', 'password', 'firstName', 'lastName', 'address'];\n\n      for (let i = 0; i < arrInput.length; i++) {\n        console.log('check inside look', this.state[arrInput[i]], arrInput[i]);\n\n        if (!this.state[arrInput[i]]) {\n          isValid = false;\n          alert('Missing parameter: ' + arrInput[i]);\n          break;\n        }\n      }\n\n      return isValid;\n    };\n\n    this.handleSaveUser = () => {\n      // validate\n      let isValid = this.checkValidateInput();\n\n      if (isValid === true) {\n        // call api edit user modal\n        this.props.editUser(this.state);\n      }\n    };\n\n    this.state = {\n      email: '',\n      password: '',\n      firstName: '',\n      lastName: '',\n      address: ''\n    };\n  } // bus event \n\n\n  componentDidMount() {\n    let user = this.props.currentUser; //{}\n    // let {currentUser} = this.props;\n\n    if (user && !_.isEmpty(user)) {\n      this.setState({\n        email: user.email,\n        password: 'harcode',\n        firstName: user.firstName,\n        lastName: user.lastName,\n        address: user.address\n      });\n    }\n\n    console.log('didmount edit modal: ', this.props.currentUser);\n  }\n\n  render() {\n    console.log('check props from parent:', this.props); // console.log('check child props', this.props);\n    // console.log('check child open modal', this.props.isOpen);\n\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: this.props.isOpen,\n      toggle: () => {\n        this.toggle();\n      },\n      className: \"model-user-container\",\n      size: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        toggle: () => {\n          this.toggle();\n        },\n        children: \"Edit a new user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"model-user-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              onChange: event => {\n                this.handleOnChageInput(event, \"email\");\n              },\n              value: this.state.email,\n              disabled: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              onChange: event => {\n                this.handleOnChageInput(event, \"password\");\n              },\n              value: this.state.password,\n              disabled: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"FirstName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              onChange: event => {\n                this.handleOnChageInput(event, \"firstName\");\n              },\n              value: this.state.firstName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"LastName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              onChange: event => {\n                this.handleOnChageInput(event, \"lastName\");\n              },\n              value: this.state.lastName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container max-width-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              onChange: event => {\n                this.handleOnChageInput(event, \"address\");\n              },\n              value: this.state.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          className: \"px-3\",\n          onClick: () => {\n            this.handleSaveUser();\n          },\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n          color: \"secondary\",\n          className: \"px-3\",\n          onClick: () => {\n            this.toggle();\n          },\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalEditUser);","map":{"version":3,"sources":["C:/Users/ADMIN/Documents/GitHub/ScheduleMedicalExamination/src/containers/System/ModalEditUser.js"],"names":["React","Component","connect","Button","Modal","ModalHeader","ModalBody","ModalFooter","_","ModalEditUser","constructor","props","toggle","toggleFromParent","handleOnChageInput","event","id","copyState","state","target","value","setState","checkValidateInput","isValid","arrInput","i","length","console","log","alert","handleSaveUser","editUser","email","password","firstName","lastName","address","componentDidMount","user","currentUser","isEmpty","render","isOpen","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n// import { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n// import { emitter } from \"../../utils/emitter\";\r\nimport _ from 'lodash';\r\n\r\nclass ModalEditUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            address: ''\r\n        }\r\n\r\n    }\r\n\r\n    // bus event \r\n    componentDidMount() {\r\n        let user = this.props.currentUser;//{}\r\n        // let {currentUser} = this.props;\r\n        if(user && !_.isEmpty(user)){\r\n            this.setState({\r\n                email: user.email,\r\n                password: 'harcode',\r\n                firstName: user.firstName,\r\n                lastName: user.lastName,\r\n                address: user.address\r\n            })\r\n        }\r\nconsole.log('didmount edit modal: ', this.props.currentUser)\r\n    }\r\n\r\n\r\n    toggle = () => {\r\n        this.props.toggleFromParent();\r\n    }\r\n    handleOnChageInput = (event, id) => {\r\n        // good code\r\n        let copyState = { ... this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState\r\n        });\r\n    }\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrInput = ['email', 'password', 'firstName', 'lastName', 'address'];\r\n        for (let i = 0; i < arrInput.length; i++) {\r\n            console.log('check inside look', this.state[arrInput[i]], arrInput[i])\r\n            if (!this.state[arrInput[i]]) {\r\n                isValid = false;\r\n                alert('Missing parameter: ' + arrInput[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n    handleSaveUser = () => {\r\n        // validate\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === true) {\r\n            // call api edit user modal\r\n            this.props.editUser(this.state);\r\n        }\r\n\r\n    }\r\n    render() {\r\n        console.log('check props from parent:', this.props)\r\n        // console.log('check child props', this.props);\r\n        // console.log('check child open modal', this.props.isOpen);\r\n        return (\r\n            <Modal\r\n                isOpen={this.props.isOpen}\r\n                toggle={() => { this.toggle() }}\r\n                className={\"model-user-container\"}\r\n                size=\"lg\"\r\n            >\r\n                <ModalHeader toggle={() => { this.toggle() }}>Edit a new user</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"model-user-body\">\r\n                        <div className=\"input-container\">\r\n                            <label>Email</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(event) => { this.handleOnChageInput(event, \"email\") }}\r\n                                value={this.state.email}\r\n                                disabled\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label>Password</label>\r\n                            <input type=\"password\"\r\n                                onChange={(event) => { this.handleOnChageInput(event, \"password\") }}\r\n                                value={this.state.password} \r\n                                disabled\r\n                                />\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label>FirstName</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChageInput(event, \"firstName\") }}\r\n                                value={this.state.firstName} />\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label>LastName</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChageInput(event, \"lastName\") }}\r\n                                value={this.state.lastName} />\r\n                        </div>\r\n                        <div className=\"input-container max-width-input\">\r\n                            <label>Address</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChageInput(event, \"address\") }}\r\n                                value={this.state.address} />\r\n                        </div>\r\n                    </div>\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        className=\"px-3\"\r\n                        onClick={() => { this.handleSaveUser() }}\r\n                    >Save Changes</Button>{' '}\r\n                    <Button color=\"secondary\" className=\"px-3\" onClick={() => { this.toggle() }}>Close</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalEditUser);\r\n"]},"metadata":{},"sourceType":"module"}